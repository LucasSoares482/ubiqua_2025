-- Criação do banco de dados
CREATE DATABASE IF NOT EXISTS eco_track_paraense
CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;

-- Usar o banco de dados
USE eco_track_paraense;

-- Tabela de Unidades da UNAMA
CREATE TABLE unidades (
    id SERIAL PRIMARY KEY,
    nome VARCHAR(100) NOT NULL,
    endereco VARCHAR(255),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- Tabela de Cursos
CREATE TABLE cursos (
    id SERIAL PRIMARY KEY,
    nome VARCHAR(100) NOT NULL,
    sigla VARCHAR(10) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- Tabela de Turnos
CREATE TABLE turnos (
    id SERIAL PRIMARY KEY,
    nome VARCHAR(50) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- Tabela de Tipos de Resíduos
CREATE TABLE tipos_residuos (
    id SERIAL PRIMARY KEY,
    nome VARCHAR(50) NOT NULL,
    descricao TEXT,
    meta_mensal DECIMAL(10,2) DEFAULT 0.00, -- Meta mensal em kg
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- Tabela de Turmas
CREATE TABLE turmas (
    id SERIAL PRIMARY KEY,
    codigo VARCHAR(50) NOT NULL,
    curso_id BIGINT UNSIGNED NOT NULL,
    semestre INT NOT NULL,
    turno_id BIGINT UNSIGNED NOT NULL,
    unidade_id BIGINT UNSIGNED NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (curso_id) REFERENCES cursos(id),
    FOREIGN KEY (turno_id) REFERENCES turnos(id),
    FOREIGN KEY (unidade_id) REFERENCES unidades(id)
);

-- Tabela de Usuários
CREATE TABLE usuarios (
    id SERIAL PRIMARY KEY,
    nome VARCHAR(100) NOT NULL,
    email VARCHAR(100) NOT NULL UNIQUE,
    senha VARCHAR(255) NOT NULL,
    perfil ENUM('admin', 'gestor', 'operador', 'estudante') NOT NULL,
    turma_id BIGINT UNSIGNED,
    unidade_id BIGINT UNSIGNED,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (turma_id) REFERENCES turmas(id),
    FOREIGN KEY (unidade_id) REFERENCES unidades(id)
);

-- Tabela de Entregas de Resíduos
CREATE TABLE entregas (
    id SERIAL PRIMARY KEY,
    usuario_id BIGINT UNSIGNED NOT NULL,
    turma_id BIGINT UNSIGNED NOT NULL,
    tipo_residuo_id BIGINT UNSIGNED NOT NULL,
    quantidade DECIMAL(10,2) NOT NULL, -- Em Kg
    data_entrega DATE NOT NULL,
    registrado_por BIGINT UNSIGNED NOT NULL,
    confirmado BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (usuario_id) REFERENCES usuarios(id),
    FOREIGN KEY (turma_id) REFERENCES turmas(id),
    FOREIGN KEY (tipo_residuo_id) REFERENCES tipos_residuos(id),
    FOREIGN KEY (registrado_por) REFERENCES usuarios(id)
);

-- Tabela de Metas de Reciclagem
CREATE TABLE metas (
    id SERIAL PRIMARY KEY,
    tipo_residuo_id BIGINT UNSIGNED NOT NULL,
    quantidade_meta DECIMAL(10,2) NOT NULL, -- Em Kg
    data_inicio DATE NOT NULL,
    data_fim DATE NOT NULL,
    unidade_id BIGINT UNSIGNED,  -- NULL para meta global
    turma_id BIGINT UNSIGNED,    -- NULL para meta não específica de turma
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (tipo_residuo_id) REFERENCES tipos_residuos(id),
    FOREIGN KEY (unidade_id) REFERENCES unidades(id),
    FOREIGN KEY (turma_id) REFERENCES turmas(id)
);

-- Tabela para comentários/depoimentos
CREATE TABLE depoimentos (
    id SERIAL PRIMARY KEY,
    usuario_id BIGINT UNSIGNED NOT NULL,
    texto TEXT NOT NULL,
    avaliacao INT NOT NULL CHECK (avaliacao >= 1 AND avaliacao <= 5),
    aprovado BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (usuario_id) REFERENCES usuarios(id)
);

-- Tabela para newsletter
CREATE TABLE newsletter (
    id SERIAL PRIMARY KEY,
    email VARCHAR(100) NOT NULL UNIQUE,
    ativo BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Tabela para configurações do sistema
CREATE TABLE configuracoes (
    id SERIAL PRIMARY KEY,
    chave VARCHAR(50) NOT NULL UNIQUE,
    valor TEXT,
    descricao VARCHAR(255),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- Inserção de dados iniciais para os tipos de resíduos
INSERT INTO tipos_residuos (nome, descricao, meta_mensal) VALUES 
('Alumínio', 'Latas, papel alumínio e outros itens de alumínio', 100.00),
('Vidro', 'Garrafas, potes e outros itens de vidro', 150.00),
('Pano', 'Tecidos, roupas e outros materiais têxteis', 80.00),
('PET', 'Garrafas plásticas e outros items feitos de PET', 120.00);

-- Inserção de dados iniciais para os turnos
INSERT INTO turnos (nome) VALUES 
('Matutino'),
('Vespertino'),
('Noturno'),
('Integral');

-- Inserção de dados iniciais para as unidades
INSERT INTO unidades (nome, endereco) VALUES 
('Unama Alcindo Cacela', 'Av. Alcindo Cacela, Belém - PA'),
('Unama Ananindeua', 'Rod. BR-316 - Ananindeua - PA');

-- Inserção de dados iniciais para os cursos
INSERT INTO cursos (nome, sigla) VALUES 
('Ciência da Computação', 'CC'),
('Sistemas de Informação', 'SI'),
('Engenharia da Computação', 'EC'),
('Engenharia Ambiental', 'EA'),
('Design', 'DS');

-- Inserção de turmas iniciais
INSERT INTO turmas (codigo, curso_id, semestre, turno_id, unidade_id) VALUES
('CC3NA', 1, 3, 3, 1), -- Ciência da Computação, 3º semestre, Noturno, Alcindo Cacela
('SI2MB', 2, 2, 1, 1), -- Sistemas de Informação, 2º semestre, Matutino, Alcindo Cacela
('EA4VA', 4, 4, 2, 1), -- Engenharia Ambiental, 4º semestre, Vespertino, Alcindo Cacela
('EC2MA', 3, 2, 1, 2), -- Engenharia da Computação, 2º semestre, Matutino, Ananindeua
('SI4NA', 2, 4, 3, 2); -- Sistemas de Informação, 4º semestre, Noturno, Ananindeua

-- Inserção de usuário administrador padrão
-- Senha: admin123 (usando password_hash)
INSERT INTO usuarios (nome, email, senha, perfil) VALUES
('Administrador', 'admin@ecotrackaparaense.com.br', '$2y$10$8MvTUv68YRO/Qj3eIrP.u.ErO.QGZtBkN0kzEPXxhG4M9Jf8Q.NpS', 'admin');

-- Configurações iniciais do sistema
INSERT INTO configuracoes (chave, valor, descricao) VALUES
('site_nome', 'ECO TRACK Paraense', 'Nome do site'),
('site_descricao', 'Reciclagem para COP30', 'Descrição do site'),
('manutencao', '0', 'Site em manutenção (0 = não, 1 = sim)'),
('versao', '1.0.0', 'Versão do sistema'),
('email_contato', 'contato@ecotrackaparaense.com.br', 'E-mail de contato'),
('telefone_contato', '(91) 3344-5566', 'Telefone de contato');

-- Criação de índices para melhorar a performance das consultas
CREATE INDEX idx_entregas_usuario ON entregas(usuario_id);
CREATE INDEX idx_entregas_turma ON entregas(turma_id);
CREATE INDEX idx_entregas_tipo ON entregas(tipo_residuo_id);
CREATE INDEX idx_entregas_data ON entregas(data_entrega);
CREATE INDEX idx_turma_curso ON turmas(curso_id);
CREATE INDEX idx_turma_unidade ON turmas(unidade_id);

-- Visão para relatório de entregas por turma
CREATE VIEW vw_entregas_por_turma AS
SELECT 
    t.codigo AS codigo_turma,
    c.nome AS curso,
    u.nome AS unidade,
    tr.nome AS tipo_residuo,
    SUM(e.quantidade) AS total_kg,
    COUNT(DISTINCT e.usuario_id) AS total_participantes,
    MAX(e.data_entrega) AS ultima_entrega
FROM 
    entregas e
    JOIN turmas t ON e.turma_id = t.id
    JOIN cursos c ON t.curso_id = c.id
    JOIN unidades u ON t.unidade_id = u.id
    JOIN tipos_residuos tr ON e.tipo_residuo_id = tr.id
WHERE
    e.confirmado = TRUE
GROUP BY 
    t.id, tr.id;

-- Visão para ranking de turmas
CREATE VIEW vw_ranking_turmas AS
SELECT 
    t.codigo AS codigo_turma,
    c.nome AS curso,
    tur.nome AS turno,
    u.nome AS unidade,
    SUM(e.quantidade) AS total_kg
FROM 
    entregas e
    JOIN turmas t ON e.turma_id = t.id
    JOIN cursos c ON t.curso_id = c.id
    JOIN turnos tur ON t.turno_id = tur.id
    JOIN unidades u ON t.unidade_id = u.id
WHERE
    e.confirmado = TRUE
GROUP BY 
    t.id
ORDER BY 
    total_kg DESC;

-- Visão para ranking de cursos
CREATE VIEW vw_ranking_cursos AS
SELECT 
    c.nome AS curso,
    SUM(e.quantidade) AS total_kg,
    COUNT(DISTINCT t.id) AS total_turmas
FROM 
    entregas e
    JOIN turmas t ON e.turma_id = t.id
    JOIN cursos c ON t.curso_id = c.id
WHERE
    e.confirmado = TRUE
GROUP BY 
    c.id
ORDER BY 
    total_kg DESC;

-- Procedimento para registrar uma entrega
DELIMITER //
CREATE PROCEDURE sp_registrar_entrega(
    IN p_usuario_id BIGINT, 
    IN p_turma_id BIGINT,
    IN p_tipo_residuo_id BIGINT,
    IN p_quantidade DECIMAL(10,2),
    IN p_registrado_por BIGINT
)
BEGIN
    INSERT INTO entregas (
        usuario_id, 
        turma_id, 
        tipo_residuo_id, 
        quantidade, 
        data_entrega, 
        registrado_por,
        confirmado
    ) VALUES (
        p_usuario_id,
        p_turma_id,
        p_tipo_residuo_id,
        p_quantidade,
        CURDATE(),
        p_registrado_por,
        TRUE
    );
    
    SELECT LAST_INSERT_ID() AS id_entrega;
END //
DELIMITER ;

-- Trigger para atualizar totais após inserção/atualização de entrega
DELIMITER //
CREATE TRIGGER after_entrega_insert
AFTER INSERT ON entregas
FOR EACH ROW
BEGIN
    -- Aqui poderia ter lógica para atualizar tabelas de resumo ou estatísticas
    -- se necessário em uma implementação mais avançada
END //
DELIMITER ;